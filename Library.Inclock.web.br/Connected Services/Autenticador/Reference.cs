//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Library.Inclock.web.br.Autenticador {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Autenticador.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOptions", ReplyAction="http://tempuri.org/IService/GetOptionsResponse")]
        void GetOptions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetOptions", ReplyAction="http://tempuri.org/IService/GetOptionsResponse")]
        System.Threading.Tasks.Task GetOptionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Logar", ReplyAction="http://tempuri.org/IService/LogarResponse")]
        Classes.VO.Funcionario Logar(string password, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Logar", ReplyAction="http://tempuri.org/IService/LogarResponse")]
        System.Threading.Tasks.Task<Classes.VO.Funcionario> LogarAsync(string password, string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetLogin", ReplyAction="http://tempuri.org/IService/GetLoginResponse")]
        string GetLogin(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetLogin", ReplyAction="http://tempuri.org/IService/GetLoginResponse")]
        System.Threading.Tasks.Task<string> GetLoginAsync(string Email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPassword", ReplyAction="http://tempuri.org/IService/GetPasswordResponse")]
        string GetPassword(string Login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetPassword", ReplyAction="http://tempuri.org/IService/GetPasswordResponse")]
        System.Threading.Tasks.Task<string> GetPasswordAsync(string Login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserById", ReplyAction="http://tempuri.org/IService/GetUserByIdResponse")]
        Classes.VO.Funcionario GetUserById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetUserById", ReplyAction="http://tempuri.org/IService/GetUserByIdResponse")]
        System.Threading.Tasks.Task<Classes.VO.Funcionario> GetUserByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckPoint", ReplyAction="http://tempuri.org/IService/CheckPointResponse")]
        Classes.VO.FeedBack CheckPoint(string funcionario, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CheckPoint", ReplyAction="http://tempuri.org/IService/CheckPointResponse")]
        System.Threading.Tasks.Task<Classes.VO.FeedBack> CheckPointAsync(string funcionario, string type);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExpediente", ReplyAction="http://tempuri.org/IService/GetExpedienteResponse")]
        Classes.VO.Expediente[] GetExpediente(string semana, string funcionario_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetExpediente", ReplyAction="http://tempuri.org/IService/GetExpedienteResponse")]
        System.Threading.Tasks.Task<Classes.VO.Expediente[]> GetExpedienteAsync(string semana, string funcionario_Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAvisos", ReplyAction="http://tempuri.org/IService/GetAvisosResponse")]
        Classes.VO.Aviso[] GetAvisos(string qtde);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAvisos", ReplyAction="http://tempuri.org/IService/GetAvisosResponse")]
        System.Threading.Tasks.Task<Classes.VO.Aviso[]> GetAvisosAsync(string qtde);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCheckPoint", ReplyAction="http://tempuri.org/IService/GetCheckPointResponse")]
        Classes.VO.EspelhoPonto[] GetCheckPoint(string month, string funcionario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCheckPoint", ReplyAction="http://tempuri.org/IService/GetCheckPointResponse")]
        System.Threading.Tasks.Task<Classes.VO.EspelhoPonto[]> GetCheckPointAsync(string month, string funcionario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCheckPointByDate", ReplyAction="http://tempuri.org/IService/GetCheckPointByDateResponse")]
        Classes.VO.EspelhoPonto[] GetCheckPointByDate(string InitialDate, string FinalDate, string id_funcionario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCheckPointByDate", ReplyAction="http://tempuri.org/IService/GetCheckPointByDateResponse")]
        System.Threading.Tasks.Task<Classes.VO.EspelhoPonto[]> GetCheckPointByDateAsync(string InitialDate, string FinalDate, string id_funcionario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCheckPointDateInterval", ReplyAction="http://tempuri.org/IService/GetCheckPointDateIntervalResponse")]
        Classes.VO.EspelhoPonto[] GetCheckPointDateInterval(string InitialDate, string FinalDate, string id_funcionario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCheckPointDateInterval", ReplyAction="http://tempuri.org/IService/GetCheckPointDateIntervalResponse")]
        System.Threading.Tasks.Task<Classes.VO.EspelhoPonto[]> GetCheckPointDateIntervalAsync(string InitialDate, string FinalDate, string id_funcionario);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCheckPointById", ReplyAction="http://tempuri.org/IService/GetCheckPointByIdResponse")]
        Classes.VO.Ponto GetCheckPointById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetCheckPointById", ReplyAction="http://tempuri.org/IService/GetCheckPointByIdResponse")]
        System.Threading.Tasks.Task<Classes.VO.Ponto> GetCheckPointByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConvertePeriodo", ReplyAction="http://tempuri.org/IService/ConvertePeriodoResponse")]
        int ConvertePeriodo(string hora);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ConvertePeriodo", ReplyAction="http://tempuri.org/IService/ConvertePeriodoResponse")]
        System.Threading.Tasks.Task<int> ConvertePeriodoAsync(string hora);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ExcluitExpediente", ReplyAction="http://tempuri.org/IService/ExcluitExpedienteResponse")]
        Classes.VO.FeedBack ExcluitExpediente(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ExcluitExpediente", ReplyAction="http://tempuri.org/IService/ExcluitExpedienteResponse")]
        System.Threading.Tasks.Task<Classes.VO.FeedBack> ExcluitExpedienteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CadastrarExpediente", ReplyAction="http://tempuri.org/IService/CadastrarExpedienteResponse")]
        Classes.VO.FeedBack CadastrarExpediente(Classes.VO.Expediente exp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CadastrarExpediente", ReplyAction="http://tempuri.org/IService/CadastrarExpedienteResponse")]
        System.Threading.Tasks.Task<Classes.VO.FeedBack> CadastrarExpedienteAsync(Classes.VO.Expediente exp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Library.Inclock.web.br.Autenticador.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Library.Inclock.web.br.Autenticador.IService>, Library.Inclock.web.br.Autenticador.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void GetOptions() {
            base.Channel.GetOptions();
        }
        
        public System.Threading.Tasks.Task GetOptionsAsync() {
            return base.Channel.GetOptionsAsync();
        }
        
        public Classes.VO.Funcionario Logar(string password, string login) {
            return base.Channel.Logar(password, login);
        }
        
        public System.Threading.Tasks.Task<Classes.VO.Funcionario> LogarAsync(string password, string login) {
            return base.Channel.LogarAsync(password, login);
        }
        
        public string GetLogin(string Email) {
            return base.Channel.GetLogin(Email);
        }
        
        public System.Threading.Tasks.Task<string> GetLoginAsync(string Email) {
            return base.Channel.GetLoginAsync(Email);
        }
        
        public string GetPassword(string Login) {
            return base.Channel.GetPassword(Login);
        }
        
        public System.Threading.Tasks.Task<string> GetPasswordAsync(string Login) {
            return base.Channel.GetPasswordAsync(Login);
        }
        
        public Classes.VO.Funcionario GetUserById(string id) {
            return base.Channel.GetUserById(id);
        }
        
        public System.Threading.Tasks.Task<Classes.VO.Funcionario> GetUserByIdAsync(string id) {
            return base.Channel.GetUserByIdAsync(id);
        }
        
        public Classes.VO.FeedBack CheckPoint(string funcionario, string type) {
            return base.Channel.CheckPoint(funcionario, type);
        }
        
        public System.Threading.Tasks.Task<Classes.VO.FeedBack> CheckPointAsync(string funcionario, string type) {
            return base.Channel.CheckPointAsync(funcionario, type);
        }
        
        public Classes.VO.Expediente[] GetExpediente(string semana, string funcionario_Id) {
            return base.Channel.GetExpediente(semana, funcionario_Id);
        }
        
        public System.Threading.Tasks.Task<Classes.VO.Expediente[]> GetExpedienteAsync(string semana, string funcionario_Id) {
            return base.Channel.GetExpedienteAsync(semana, funcionario_Id);
        }
        
        public Classes.VO.Aviso[] GetAvisos(string qtde) {
            return base.Channel.GetAvisos(qtde);
        }
        
        public System.Threading.Tasks.Task<Classes.VO.Aviso[]> GetAvisosAsync(string qtde) {
            return base.Channel.GetAvisosAsync(qtde);
        }
        
        public Classes.VO.EspelhoPonto[] GetCheckPoint(string month, string funcionario) {
            return base.Channel.GetCheckPoint(month, funcionario);
        }
        
        public System.Threading.Tasks.Task<Classes.VO.EspelhoPonto[]> GetCheckPointAsync(string month, string funcionario) {
            return base.Channel.GetCheckPointAsync(month, funcionario);
        }
        
        public Classes.VO.EspelhoPonto[] GetCheckPointByDate(string InitialDate, string FinalDate, string id_funcionario) {
            return base.Channel.GetCheckPointByDate(InitialDate, FinalDate, id_funcionario);
        }
        
        public System.Threading.Tasks.Task<Classes.VO.EspelhoPonto[]> GetCheckPointByDateAsync(string InitialDate, string FinalDate, string id_funcionario) {
            return base.Channel.GetCheckPointByDateAsync(InitialDate, FinalDate, id_funcionario);
        }
        
        public Classes.VO.EspelhoPonto[] GetCheckPointDateInterval(string InitialDate, string FinalDate, string id_funcionario) {
            return base.Channel.GetCheckPointDateInterval(InitialDate, FinalDate, id_funcionario);
        }
        
        public System.Threading.Tasks.Task<Classes.VO.EspelhoPonto[]> GetCheckPointDateIntervalAsync(string InitialDate, string FinalDate, string id_funcionario) {
            return base.Channel.GetCheckPointDateIntervalAsync(InitialDate, FinalDate, id_funcionario);
        }
        
        public Classes.VO.Ponto GetCheckPointById(string id) {
            return base.Channel.GetCheckPointById(id);
        }
        
        public System.Threading.Tasks.Task<Classes.VO.Ponto> GetCheckPointByIdAsync(string id) {
            return base.Channel.GetCheckPointByIdAsync(id);
        }
        
        public int ConvertePeriodo(string hora) {
            return base.Channel.ConvertePeriodo(hora);
        }
        
        public System.Threading.Tasks.Task<int> ConvertePeriodoAsync(string hora) {
            return base.Channel.ConvertePeriodoAsync(hora);
        }
        
        public Classes.VO.FeedBack ExcluitExpediente(int id) {
            return base.Channel.ExcluitExpediente(id);
        }
        
        public System.Threading.Tasks.Task<Classes.VO.FeedBack> ExcluitExpedienteAsync(int id) {
            return base.Channel.ExcluitExpedienteAsync(id);
        }
        
        public Classes.VO.FeedBack CadastrarExpediente(Classes.VO.Expediente exp) {
            return base.Channel.CadastrarExpediente(exp);
        }
        
        public System.Threading.Tasks.Task<Classes.VO.FeedBack> CadastrarExpedienteAsync(Classes.VO.Expediente exp) {
            return base.Channel.CadastrarExpedienteAsync(exp);
        }
    }
}
